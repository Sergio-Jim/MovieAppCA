@model IEnumerable<MovieApp.Domain.Entities.Movie>
@{
    ViewData["Title"] = "Movies";
    var isAdmin = User?.IsInRole("Admin") == true || User?.IsInRole("SuperAdmin") == true;
}
<h1>Movies</h1>
@if (isAdmin)
{
        <p>
            <a asp-action="Create" class="btn btn-primary">Create New</a>
        </p>
}

<div class="container">
    <table id="moviesTable" class="table table-striped table-responsive" style="width:100%">
        <thead>
            <tr>
                <th>Image</th>
                <th>Title</th>
                <th>Release Date</th>
                <th>Genre</th>
                <th>Price</th>
                <th>Rating</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<!-- Modal for Deleting Movie -->
<div class="modal fade" id="movieDeleteModal" tabindex="-1" aria-labelledby="movieDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="movieDeleteModalLabel">Confirm Movie Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="deleteModalBody">
                <p>Are you sure you want to delete the movie with ID: <span id="deleteMovieId"></span>? This action cannot be undone.</p>
                <form id="deleteMovieForm">
                    <input type="hidden" name="id" id="modalMovieId" />
                    <div class="form-group mb-3">
                        <label for="superAdminEmailMovie">SuperAdmin Email</label>
                        <input type="email" class="form-control" id="superAdminEmailMovie" name="superAdminEmail" required />
                    </div>
                    <div class="form-group mb-3">
                        <label for="superAdminPasswordMovie">SuperAdmin Password</label>
                        <input type="password" class="form-control" id="superAdminPasswordMovie" name="superAdminPassword" required />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger confirm-delete-movie">Confirm Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
        <script>
            $(document).ready(function () {
                $('#moviesTable').DataTable({
                    "processing": true,
                    "serverSide": true,
                    "ajax": {
                        "url": '@Url.Action("GetMovies", "Movies")',
                        "type": "POST",
                        "data": function (d) {
                            // Add anti-forgery token to the request
                            d.__RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val();
                        }
                    },
                    "columns": [
                        {
                            "data": "imageUrl",
                            "render": function (data, type, row) {
                                return data ? '<img src="' + data + '" alt="' + row.title + '" style="width: 50px; height: auto;" />' : 'No Image';
                            },
                            "orderable": false,
                            "width": "60px"
                        },
                        { "data": "title" },
                        { "data": "releaseDate" },
                        { "data": "genre" },
                        { "data": "price" },
                        { "data": "rating" },
                        {
                            "data": null,
                            "render": function (data, type, row) {
                                var actions = '<form action="' + '@Url.Action("Watch", "Movies")' + '" method="post" style="display: inline;" data-ajax="false" data-movie-id="' + row.id + '">' +
                                              '<input type="hidden" name="id" value="' + row.id + '" />' +
                                              '<button type="submit" class="btn btn-sm btn-success watch-movie">Watch</button>' +
                                              '</form>' +
                                              '<a href="' + '@Url.Action("Details", "Movies")' + '?id=' + row.id + '" class="btn btn-sm btn-info details-movie">Details</a>';
                                if ('@isAdmin' === 'True') {
                                    actions += '<a href="' + '@Url.Action("Edit", "Movies")' + '?id=' + row.id + '" class="btn btn-sm btn-warning edit-movie">Edit</a>' +
                                               '<button type="button" class="btn btn-sm btn-danger delete-movie" data-movie-id="' + row.id + '" data-bs-toggle="modal" data-bs-target="#movieDeleteModal">Delete</button>';
                                }
                                return actions;
                            },
                            "orderable": false
                        }
                    ],
                    "order": [[2, "desc"]], // Order by Release Date descending by default
                    "pageLength": 10,
                    "responsive": true // Ensure responsiveness
                });

                // Handle movie actions with event delegation for dynamic content
                $('#moviesTable').on('click', '.watch-movie', function (e) {
                    e.preventDefault();
                    var form = $(this).closest('form');
                    var movieId = form.data('movie-id');
                    $.ajax({
                        url: form.attr('action'),
                        type: 'POST',
                        data: form.serialize(),
                        success: function (response) {
                            if (response.success) {
                                Toastify({
                                    text: "Movie watched successfully.",
                                    duration: 3000,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "green"
                                }).showToast();
                            } else {
                                Toastify({
                                    text: "Error watching movie: " + (response.errors ? response.errors.join(', ') : "Unknown error"),
                                    duration: 3000,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "red"
                                }).showToast();
                            }
                        },
                        error: function (xhr, status, error) {
                            Toastify({
                                text: "Error watching movie: " + error,
                                duration: 3000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "red"
                            }).showToast();
                        }
                    });
                });

                $('#moviesTable').on('click', '.details-movie', function (e) {
                    e.preventDefault();
                    var url = $(this).attr('href');
                    window.location.href = url; // Navigate to the Details page
                });

                $('#moviesTable').on('click', '.edit-movie', function (e) {
                    e.preventDefault();
                    var url = $(this).attr('href');
                    window.location.href = url; // Navigate to the Edit page
                });

                // Handle movie deletion modal
                $(document).on('click', '.delete-movie', function (e) {
                    e.preventDefault();
                    var movieId = $(this).data('movie-id');
                    console.log('Movie ID for deletion:', movieId); // Debug log
                    console.log('Button element:', $(this)); // Log the button for inspection
                    if (movieId) {
                        $('#deleteMovieId').text(movieId);
                        $('#modalMovieId').val(movieId);
                        $('#movieDeleteModal').modal('show');
                    } else {
                        console.error('Movie ID is undefined or null');
                        Toastify({
                            text: "Error: Movie ID not found for deletion.",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "red"
                        }).showToast();
                    }
                });

                // Confirm Delete Movie
                $(document).on('click', '.confirm-delete-movie', function () {
                    var movieId = $('#modalMovieId').val();
                    console.log('Confirming deletion for Movie ID:', movieId);
                    console.log('Form data:', {
                        id: movieId,
                        superAdminEmail: $('#superAdminEmailMovie').val(),
                        superAdminPassword: $('#superAdminPasswordMovie').val()
                    });
                    var token = $('input[name="__RequestVerificationToken"]').val(); // Get CSRF token
                    $.ajax({
                        url: '@Url.Action("Delete", "Movies")',
                        type: 'POST',
                        data: {
                            id: movieId,
                            superAdminEmail: $('#superAdminEmailMovie').val(),
                            superAdminPassword: $('#superAdminPasswordMovie').val(),
                            __RequestVerificationToken: token
                        },
                        success: function (response) {
                            console.log('Delete response:', response); // Debug log
                            if (response.success) {
                                Toastify({
                                    text: response.message,
                                    duration: 3000,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "green"
                                }).showToast();
                                $('#movieDeleteModal').modal('hide');
                                $('#moviesTable').DataTable().ajax.reload(); // Reload DataTable to reflect changes
                            } else {
                                Toastify({
                                    text: response.errors.join(', '),
                                    duration: 3000,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "red"
                                }).showToast();
                            }
                        },
                        error: function (xhr, status, error) {
                            console.log('Delete error:', xhr, status, error); // Debug log
                            Toastify({
                                text: "Error deleting movie: " + error,
                                duration: 3000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "red"
                            }).showToast();
                        }
                    });
                });
            });
        </script>
}